<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Editor with Line Numbers</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        .editor-container {
            display: flex;
            flex-direction: column;
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .controls {
            padding: 10px;
            background-color: #e0e0e0;
            border-bottom: 1px solid #ccc;
            display: flex;
            gap: 10px;
        }
        
        .jump-controls {
            display: flex;
            gap: 5px;
        }
        
        input[type="number"] {
            width: 60px;
            padding: 5px;
        }
        
        button {
            padding: 5px 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }
        
        button:hover {
            background-color: #45a049;
        }
        
        .editor-wrapper {
            display: flex;
            height: 400px;
            overflow: hidden;
        }
        
        .line-numbers {
            width: 40px;
            background-color: #f0f0f0;
            padding: 10px;
            overflow-y: hidden;
            text-align: right;
            color: #888;
            border-right: 1px solid #ddd;
            user-select: none;
        }
        
        .text-area {
            flex: 1;
            padding: 10px;
            border: none;
            resize: none;
            outline: none;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            white-space: pre;
            overflow-y: scroll;
            overflow-x: auto;
        }
        
        .text-area:focus {
            background-color: #fffef7;
        }
        
        .highlight {
            background-color: #fffacd;
        }
        
        .file-input {
            display: none;
        }
        
        .file-label {
            padding: 5px 10px;
            background-color: #2196F3;
            color: white;
            border-radius: 3px;
            cursor: pointer;
        }
        
        .file-label:hover {
            background-color: #0b7dda;
        }
        
        .feature-checklist {
            max-width: 800px;
            margin: 20px auto;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .feature-checklist h3 {
            margin-top: 0;
            color: #333;
        }
        
        .feature-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .feature-item input {
            margin-right: 10px;
        }
        
        .feature-item label {
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="editor-container">
        <div class="controls">
            <label class="file-label">
                Load File
                <input type="file" class="file-input" id="fileInput" accept=".txt,.js,.html,.css,.json">
            </label>
            <div class="jump-controls">
                <input type="number" id="lineNumberInput" min="1" placeholder="Line">
                <button id="jumpButton">Jump</button>
            </div>
        </div>
        <div class="editor-wrapper">
            <div class="line-numbers" id="lineNumbers"></div>
            <textarea class="text-area" id="textArea" spellcheck="false"></textarea>
        </div>
    </div>

    <div class="feature-checklist">
        <h3>Implemented Features Checklist</h3>
        <div class="feature-item">
            <input type="checkbox" id="feature1" checked disabled>
            <label for="feature1">Text Area for content input</label>
        </div>
        <div class="feature-item">
            <input type="checkbox" id="feature2" checked disabled>
            <label for="feature2">Dynamic Line Number Display</label>
        </div>
        <div class="feature-item">
            <input type="checkbox" id="feature3" checked disabled>
            <label for="feature3">Synchronized Scrolling</label>
        </div>
        <div class="feature-item">
            <input type="checkbox" id="feature4" checked disabled>
            <label for="feature4">Jump to Line Functionality</label>
        </div>
        <div class="feature-item">
            <input type="checkbox" id="feature5" checked disabled>
            <label for="feature5">Line Highlighting</label>
        </div>
        <div class="feature-item">
            <input type="checkbox" id="feature6" checked disabled>
            <label for="feature6">File Loading</label>
        </div>
        <div class="feature-item">
            <input type="checkbox" id="feature7" checked disabled>
            <label for="feature7">Responsive UI Design</label>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const textArea = document.getElementById('textArea');
            const lineNumbers = document.getElementById('lineNumbers');
            const lineNumberInput = document.getElementById('lineNumberInput');
            const jumpButton = document.getElementById('jumpButton');
            const fileInput = document.getElementById('fileInput');
            
            // Initialize line numbers
            updateLineNumbers();
            
            // Update line numbers when text changes
            textArea.addEventListener('input', updateLineNumbers);
            
            // Synchronize scrolling between text area and line numbers
            textArea.addEventListener('scroll', function() {
                lineNumbers.scrollTop = textArea.scrollTop;
            });
            
            // Jump to line functionality
            jumpButton.addEventListener('click', jumpToLine);
            lineNumberInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    jumpToLine();
                }
            });
            
            // File loading functionality
            fileInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    textArea.value = e.target.result;
                    updateLineNumbers();
                };
                reader.readAsText(file);
            });
            
            function updateLineNumbers() {
                const lines = textArea.value.split('\n');
                let lineNumbersHTML = '';
                
                for (let i = 0; i < lines.length; i++) {
                    lineNumbersHTML += (i + 1) + '<br>';
                }
                
                lineNumbers.innerHTML = lineNumbersHTML;
            }
            
            function jumpToLine() {
                const lineNumber = parseInt(lineNumberInput.value);
                if (isNaN(lineNumber) || lineNumber < 1) return;
                
                const lines = textArea.value.split('\n');
                if (lineNumber > lines.length) {
                    lineNumberInput.value = lines.length;
                    return;
                }
                
                // Calculate position to scroll to
                const lineHeight = parseInt(window.getComputedStyle(textArea).lineHeight);
                const scrollPosition = (lineNumber - 1) * lineHeight;
                
                // Scroll to the line
                textArea.scrollTo({
                    top: scrollPosition,
                    behavior: 'smooth'
                });
                
                // Highlight the line
                highlightLine(lineNumber);
            }
            
            function highlightLine(lineNumber) {
                // Remove any existing highlights
                const lines = textArea.value.split('\n');
                let charCount = 0;
                
                for (let i = 0; i < lines.length; i++) {
                    if (i === lineNumber - 1) {
                        textArea.focus();
                        textArea.setSelectionRange(charCount, charCount + lines[i].length);
                        break;
                    }
                    charCount += lines[i].length + 1; // +1 for the newline character
                }
            }
        });
    </script>
</body>
</html>.
